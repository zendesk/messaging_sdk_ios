// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MessagingSDK
import CommonUISDK
import Foundation
import MessagingAPI
@_exported import MessagingSDK
import SDKConfigurations
import Swift
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ZDKClassicMessaging) final public class Messaging : ObjectiveC.NSObject {
  @objc public static var instance: MessagingSDK.Messaging {
    @objc get
  }
  @objc final public var isMessagingPresented: Swift.Bool {
    @objc get
  }
  @objc weak final public var delegate: MessagingSDK.MessagingDelegate?
  @objc deinit
  final public func buildUI(engines: [MessagingAPI.Engine], configs: [SDKConfigurations.Configuration] = []) throws -> UIKit.UIViewController
}
extension MessagingSDK.Messaging : CommonUISDK.MessagingCoordinatorDelegate {
  final public func messagingCoordinator(_ coordinator: CommonUISDK.MessagingCoordinatorProtocol, didPerformAction action: CommonUISDK.MessagingCoordinatorAction)
}
extension MessagingSDK.Messaging : MessagingAPI.MessagingAPIProtocol {
  final public func getTransferOptions() -> [MessagingAPI.TransferOptionDescription]
  final public func getConversationLog() -> MessagingAPI.ConversationLogProtocol
  final public func getConfigurations() -> SDKConfigurations.Configurations
  final public func getBotAgentDetails() -> MessagingAPI.AgentDetails
}
@objc extension MessagingSDK.Messaging {
  @objc @available(swift, obsoleted: 1.0)
  final public func buildUI(engines: [MessagingAPI.ZDKEngine], configs: [SDKConfigurations.Configuration]) throws -> UIKit.UIViewController
}
extension MessagingAPI.TextResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingAPI.ArticlesResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
@objc(ZDKClassicMessagingUIEvent) public enum MessagingUIEvent : Swift.Int {
  case viewDidLoad
  case viewWillAppear
  case viewDidAppear
  case viewWillDisappear
  case viewDidDisappear
  case viewDidLayoutSubviews
  case viewControllerDidClose
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKClassicMessagingDelegate) public protocol MessagingDelegate {
  @objc func messaging(_ messaging: MessagingSDK.Messaging, didPerformEvent event: MessagingSDK.MessagingUIEvent, context: Any?)
  @objc func messaging(_ messaging: MessagingSDK.Messaging, shouldOpenURL url: Foundation.URL) -> Swift.Bool
}
extension MessagingAPI.TransferResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingAPI.FileQuery : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingAPI.TextQuery : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingAPI.ImageQuery : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingAPI.ImageResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
final public class DispatchTimer {
  @objc deinit
  public init(timeInterval: Foundation.TimeInterval)
  final public func execute(_ block: @escaping () -> Swift.Void)
  final public func stop()
}
@_inheritsConvenienceInitializers @objc(ZDKClassicMessagingConfiguration) final public class MessagingConfiguration : ObjectiveC.NSObject, SDKConfigurations.Configuration {
  @objc final public var name: Swift.String
  @objc final public var botAvatar: UIKit.UIImage
  @objc final public var isMultilineResponseOptionsEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension MessagingAPI.FileResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingAPI.ActionResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension MessagingSDK.MessagingUIEvent : Swift.Equatable {}
extension MessagingSDK.MessagingUIEvent : Swift.Hashable {}
extension MessagingSDK.MessagingUIEvent : Swift.RawRepresentable {}
